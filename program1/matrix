#!/bin/bash
#
# Author:					Casey Boettcher (boettchc)
# Program:				matrix
# Class:					CS344-400-F2019
# Date:						October 12, 2019
#
####################################################################################################

# catch ctrl-c and attempt exit 
trap 'rm -f infile$$; echo "SIGINT received: Deleting temp file then exiting!"; exit 1' INT

#exit codes
_EXITCODE=0
#prints uasage
BADCMD=3 
BADARGCNT=5
BADINPUT=7
BADFILEINPUT=9
INCOMPATIBLE=11

NUMARGS=$#
SUBCMD=$1 
INFILE="infile$$"
#_RET=""


# called at the beginning of the program; checks that SUBCMD is one of the five implemented functions
# pre:	SUBCMD is set with first arg to script
# in:		n/a
# out:	returns 0 or _EXITCODE
# post: n/a
usage() 
{
  if [ "$DEBUG" ]
  then
    echo -e "In usage()..." >&2
    echo -e "\tSUBCMD is $SUBCMD" >&2
  fi
  case $SUBCMD in 
    dims|transpose|mean|add|multiply) return 0;;
    *) _EXITCODE=$BADCMD && quit;;
  esac
	return 0
}


# checks the number of arguments after a subcommand (dims, transpose, etc.) and cats stdin to a
# tmp file if possible
# pre:	a valid subcommand has been issued
# in:		expects that first and second args to function are the second and third args to the script
# out:	returns 0 if no errors; _EXITCODE otherwise
# post:	INFILE is set to a valid file
chk_arg_count()
{
  if [ "$DEBUG" ]
  then
    echo -e "In chk_arg_count()..." >&2
    echo "This is first arg to func: $1" >&2
    echo "This is second arg to func: $2" >&2
  fi
	local subargs=$((NUMARGS - 1))
	if [[ "$DEBUG" ]]
	then
		echo "subargs: $subargs" >&2
	fi
	#if number of args is less than one, chk stdin
	if [[ ($subargs -lt 1) && ($SUBCMD = "dims" || $SUBCMD = 'mean' || $SUBCMD = 'transpose') ]]
	then
		if [[ "$DEBUG" ]]
		then
			echo "Checking for stdin" >&2 
		fi
		#read from stdin
		cat > "$INFILE"
		if [[ ! -r "$INFILE" ]]
		then
			_EXITCODE="$BADARGCNT"
			quit
		elif [[ "$DEBUG" ]]
		then
			echo "New file from stdin is readable." >&2
		fi
	#if args == 1, then check for incorrect subcmd
	elif [[ ($subargs -eq 1) && ($SUBCMD = "dims" || $SUBCMD = 'mean' || $SUBCMD = 'transpose') ]]   
	then
		INFILE="$1"
	elif 	[[ ($subargs -eq 1) && ($SUBCMD = "add" || $SUBCMD = 'multiply') ]]   
	then
		_EXITCODE=$BADARGCNT
		quit
	#if args > 1, and subcmd takes only one arg, throw an error
	elif [[ ( $subargs -gt 1 ) && ( $SUBCMD = 'dims' || $SUBCMD = 'mean' || $SUBCMD = 'transpose' ) ]]
	then
		_EXITCODE=$BADARGCNT
		quit
	elif [[ "$subargs" -gt 2 ]]
	then
		_EXITCODE=$BADARGCNT
		quit
	fi
	return 0   
}


# checks args for valid file(s) 
# pre:	chk_arg_count() and usage() have been called
# in:		assumes that file arguments to script are passed in to function as $1 and $2
# out:	returns 0 if no error; _EXITCODE if something goes amiss
# post: n/a 
chk_input() 
{
  if [ "$DEBUG" ]
  then 
    echo -e "In chk_input()..." >&2
  fi
	
	#if we're getting input from a single file...
  if [[ -f "$1" && -r "$1" && -s "$1" ]]
  then
    if [ "$DEBUG" ]
    then
      echo "First file readable" >&2
      echo "subcmd: $SUBCMD" >&2
    fi
		#if SUBCMD is one which only needs one file	
		if [[ ( "$SUBCMD" = 'dims' || "$SUBCMD" != 'add' || "$SUBCMD" != 'transpose' ) ]]
    then
      return 0
    #check if we should validate a second file argument 
    elif [[ "$SUBCMD" = 'add' || "$SUBCMD" = 'multiply' ]]
      then 
        if [[ -f "$2" && -r "$2" && -s "$2" ]]
        then
          if [ "$DEBUG" ] 
          then
            echo "Second file readable" >&2
          fi
          return 0
        fi
    else 
      _EXITCODE="$BADFILEINPUT" 
      quit
    fi
  else 
		_EXITCODE="$BADFILEINPUT" 
    quit
  fi
	return 0
}


# Exits program gracefully by printing error to stderr, removing any temporary files, and setting
# non-zero exit code
# pre:		_EXITCODE is set
# in:			n/a
# out:		_EXITCODE and accompanying error message, if applicable
# post:		execution terminated
quit() 
{
  if [ "$DEBUG" ]
  then
    echo -e "In quit()..." >&2
    echo -e "\t _EXITCODE is $_EXITCODE" >&2
  fi
  
  case $_EXITCODE in 
    "$BADCMD") echo -e "Usage: \tmatrix dims [MATRIX]\n\tmatrix transpose [MATRIX]"\
      "\n\tmatrix mean [MATRIX]\n\tmatrix add MATRIX1 MATRIX2"\
      "\n\tmatrix multiply MATRIX1 MATRIX2" >&2;;
    "$BADARGCNT") echo -e "Error: Number of arguments to subcommand invalid" >&2;;
    "$BADINPUT") echo -e "Error: File input not readable or too many inputs provided (stdin and"\
      "file)" >&2;;
    "$BADFILEINPUT") echo -e "Error: Wrong number of files or unable to read files supplied" >&2;;
    "$INCOMPATIBLE") echo -e "Error: Matrices cannot be used in requested operation" >&2;;
		*);;
  esac
  #clean up tmp files
  rm -f "infile$$" 
  exit $_EXITCODE
}


# gives the dimensions of a matrix in "row col" format
# pre:		file input verified	
# in:			a file argument containing a matrix
# out:		prints the dimensions ("row col") of the matrix and returns 0 on success; 
#					_EXITCODE and accompanying error message, if fail
# post:		n/a	
dims() 
{
  local col_cnt
  local row_cnt

  #get column count
  read line1 < "$1"
  col_cnt=$(echo "$line1"| wc -w)

  #get row cnt
  row_cnt=$(wc -l < "$1")
  
  if [ "$DEBUG" ] 
  then 
    echo -e "Column count: $col_cnt" >&2
    echo -e "Row count: $row_cnt" >&2
  fi
  
	echo -e "$row_cnt $col_cnt"
	return 0
}


# transposes an MxN array to an NxM array
# pre:		file input verified	
# in:			a file argument containing a matrix
# out:		prints the transposed matrix, row by row, each column tab-delimited and each row ending 
#					in a newline; returns 0 or _EXITCODE and accompanying error message if fail
# post:		n/a	
transpose() 
{
	# get the dimensions of the array
	dimsout=$(dims "$1")
	row_cnt=$(echo "$dimsout" | cut -d' ' -f 1)
	col_cnt=$(echo "$dimsout" | cut -d' ' -f 2)

  if [ "$DEBUG" ]
  then
    echo -e "In transpose..." >&2
    echo -e "Row count: $row_cnt" >&2
  fi
  #using arrays like we were advised _not_ to do
  #the following gets us a 1D array for each line of the file; each array is named rowarr<n>  
  i=0
  while IFS=$'\n' read -r line
  do
    IFS=$'\t'; read -ra rowarr$i < <(printf "%s" "$line")
		if [[ "$DEBUG" ]]
		then
			declare -p "rowarr$i"
		fi
		((i++))
  done < "$1"

  #for each column we create a string that will represent a row
  for (( c = 0; c < "$row_cnt"; c++ ))
  do
    for (( z = 0; z < "$col_cnt"; z++ ))
    do
			#this is our reference to the old matrix; an intermediate variable is used for indirect
			#...reference expansion, a technique seemingly essential to array manipulation in bash
      nr="rowarr$c[$z]"
			#here we create one variable per new matrix column
      if [ -z "newrow$z" ]
      then
        declare "newrow$z"=""
      fi
			#avoid printing a trailing tab
			if (( c == (row_cnt - 1) ))
      then
        eval "newrow$z"+="${!nr}"
      else
        eval "newrow$z"+="${!nr}$'\t'"
      fi
    done
  done
	
	#print each of the strings that represents a row in the transposed matrix
	for (( p = 0; p < "$col_cnt"; p++ ))
  do
		#again, we use indirect reference expansion to get at the value of the "generated" variable 
		out="newrow$p"
    echo "${!out}"
  done
	return 0
}


# takes a numerator and denominator, divides and rounds the quotient
# pre:		n/a
# in:			two signed integers, a numerator and a denominator, respectively
# out:	  prints the rounded quotient of the arguments on stdout and returns 0	
# post:		n/a	
mean_round()
{
	#follows the formula: (a + (b/2)*( (a>0)*2-1 )) / b
	num=$1
	den=$2
	if [ "$DEBUG" ]
	then
		echo "In mean_round..." >&2
		echo "num: $num" >&2
		echo "den: $den" >&2
	fi
	#https://stackoverflow.com/questions/3953645/ternary-operator-in-bash
	sgn=$([ "$num" -gt 0 ] && echo 1 || echo 0)
	let quot="( ( num + ( den/2 ) * ( ( sgn*2 ) - 1 ) ) / den )"
	if [ "$DEBUG" ]
	then
		echo "sgn: $sgn" >&2
		echo "quot: $quot" >&2
	fi
	_RET="$quot"
}


# finds the mean value of each column of an integer matrix
# pre:		n/a
# in:			a matrix
# out:	  prints the average of each column of a matrix, each mean delimited by a tab
# post:		n/a
mean() 
{
	# get the dimensions of the matrix argument
	dimsout=$(dims "$1")
	row_cnt=$(echo "$dimsout" | cut -d' ' -f 1)
	col_cnt=$(echo "$dimsout" | cut -d' ' -f 2)

  if [ "$DEBUG" ]
  then
    echo -e "In mean..." >&2
    echo -e "Row count: $row_cnt" >&2
  fi
  #the following gets us a 1D array for each line of the file; each array is named rowarr<n>  
  i=0
  while IFS=$'\n' read -r line
  do
    IFS=$'\t'; read -ra rowarr$i < <(printf "%s" "$line")
    ((i++))
  done < "$1"

	#declare an array to hold the means
	means=()
	
	# loop through the matrix argument
	for (( c = 0; c < "$row_cnt"; c++ ))
  do
    for (( z = 0; z < "$col_cnt"; z++ ))
    do
			# a temporary variable for indirect reference 
      nr="rowarr$c[$z]"
			let means[z]+=${!nr} 
		done
  done

	# print our array of means out
	for (( m = 0; m < "$col_cnt"; m++ ))
	do
		mean_round ${means[m]} "$row_cnt"
		if (( m == (col_cnt - 1) ))
		then
			printf "%i\n" "$_RET"
		else
			printf "%i\t" "$_RET"
		fi
	done

	return 0	
	quit
}


# given two matrices, checks whether add or multiply is a feasible operation
# pre:		n/a
# in 1:		'a' or 'm', to check whether the two matrices can be feasibly added or mulitplied
# in 2:		one of two matrices 
# in 3:		a second matrix
# out:		the dimensions of both matrices, "row1 col1 row2 col2"; returns 0 if matrices feasible
# post:		upon failure, _EXITCODE is set to $INCOMPATIBLE 
feasible()
{
	m1dims=$( dims "$2" )
	m1r=$(echo "$m1dims" | cut -d' ' -f 1)
	m1c=$(echo "$m1dims" | cut -d' ' -f 2)
  
	m2dims=$( dims "$3" )
	m2r=$(echo "$m2dims" | cut -d' ' -f 1)
	m2c=$(echo "$m2dims" | cut -d' ' -f 2)

	if [[ $DEBUG ]]
	then
		echo "In feasible()..." >&2
		echo "m1r: $m1r" >&2
		echo "m1c: $m1c" >&2
		echo "m2r: $m2r" >&2
		echo "m2c: $m2c" >&2
	fi

	#can we add them?
	if [[ "$1" == 'a' ]]
	then
		if [[ $m1r -ne $m2r || $m1c -ne $m2c ]]
		then
			_EXITCODE=$INCOMPATBLE	
			return "$_EXITCODE"
		fi
	elif [[ "$1" == 'm' ]]
	then
		if [[ "$m1c" -ne "$m2r" ]]
		then
			_EXITCODE=$INCOMPATBLE	
			return "$_EXITCODE"
		fi
	else
		echo "Wrong argument, $1, to func feasible()" >&2
		_EXITCODE=$INCOMPATBLE	
		return "$_EXITCODE"
	fi
	echo "$m1r $m1c $m2r $m2c"
	return 0
}


# add two matrices, element-wise, such that a third matrix of the same dimensions is created, which
#					...consists of the sums of the two arguments
# pre:		n/a
# in:			two matrices of equivalent dimensions	
# out:		a third matrix, consisting of tab-delimited sums,	printed to stdout
# post:		n/a
# 
add() 
{
	# check if matrices can be added	
	madddims=$(feasible 'a' "$1" "$2")
	if [[ "$?" -ne 0 ]]
	then	
		_EXITCODE=$INCOMPATIBLE
		quit
  fi
 	IFS=' '; read -a dimarr < <(echo "$madddims")
	#each index of the dimarr corresponds to a row or col dimesnion of a matrix	
	m1r=0
	m1c=1
	m2r=2
	m2c=3
 
  if [ "$DEBUG" ]
  then
		echo "In add() after feasible..." >&2
	  echo "file1: $1" >&2
	  echo "file2: $2" >&2
	  echo "rows: ${dimarr[$m1r]}" >&2
  fi

  #the following gets us an array for each line of the file; each array is named rowarr<n>  
  i=0
  while IFS=$'\n' read -r -u 3 oneline && IFS=$'\n' read -r -u 4 twoline
  do
    IFS=$'\t'; read -ra mat1row$i < <(printf "%s" "$oneline")
    IFS=$'\t'; read -ra mat2row$i < <(printf "%s" "$twoline")
    ((i++))
  done 3<"$1" 4<"$2"

	#close descriptors
	3<&-
	4<&-
	
	echo "TEST############"
	if    command >&3
	then  echo 3 is open >&3
	else  ! echo 3 is not open
	fi    2<>/dev/null

	mr="${dimarr[$m1r]}"
	mc="${dimarr[$m1c]}"
	
	#loop through the two sets of arrays and create a third
	for (( k = 0; k < mr; k++ ))  
	do
		for ((q = 0; q < mc; q++ ))
		do
			local m1r="mat1row$k[$q]"
			local m2r="mat2row$k[$q]"
			#let's not overwrite our new row
			if [ ! -v "mat3row$k" ]
			then
				declare -a "mat3row$k"
				if [ "$DEBUG" ]
				then
					declare -p "mat3row$k"	
				fi
			fi
			m3r="mat3row$k[$q]"
			let "mat3row$k[$q]"=${!m1r}
			let "mat3row$k[$q]"+=${!m2r}
			
			if [ "$DEBUG" ]
			then
				echo "'mat1row$k[$q]': ${!m1r}" >&2
				echo "'mat2row$k[$q]': ${!m2r}" >&2
				echo "'mat3row$k[$q]': ${!m3r}" >&2
			fi
		done
	done
	
	#print out the third array
	outline=""
  for (( r = 0; r < mr; r++ ))
  do
		for (( s = 0; s < mc; s++ ))
		do
			num="mat3row$r[$s]"			
			if (( s == dimarr[m1c] - 1 ))
      then
        outline+="${!num}"
      else
				outline+="${!num}\t"
      fi
		done
		echo -e "$outline"
		outline=""
	done
	return 0
}

multiply() 
{
	mmdims=$(feasible 'm' "$1" "$2")
	if [[ "$?" -ne 0 ]]
	then
		_EXITCODE=$INCOMPATIBLE
		quit
  fi
	IFS=' '; read -a dimarr < <(echo "$mmdims")
	#each index of the dimarr corresponds to a row or col dimesnion of a matrix	
	m1r=0
	m1c=1
	m2r=2
	m2c=3

	if [ "$DEBUG" ]
  then
		echo "In multiply() after feasible..." >&2
	  echo "file1: $1" >&2
	  echo "file2: $2" >&2
		readarray -t < <(echo "$dimarr") >&2
  fi

  #the following gets us a 1D array for each line of the file; each array is named rowarr<n>  
  i=0
  while IFS=$'\n' read -r line
  do
    IFS=$'\t'; read -ra mat1row$i < <(printf "%s" "$line")
    ((i++))
  done < "$1"

	#get a set of arrays for the second matrix
  j=0
  while IFS=$'\n' read -r line
  do
    IFS=$'\t'; read -ra mat2row$j < <(printf "%s" "$line")
    ((j++))
  done < "$2"

	# I think there's a bug in bash that prevents proper evaluation of variable indices within an
	# arithmetic context. This works around that issue.
	m1rows="${dimarr[$m1r]}"
	m2rows="${dimarr[$m2r]}"
	m2cols="${dimarr[$m2c]}"
	
	declare m1r=0
	declare m2r=0
	
	for (( x = 0; x < m1rows; x++ ))  
	do
		for (( y = 0; y < m2cols; y++ ))
		do
			sum=0	
			for (( z = 0; z < m2rows; z++ ))
			do
				m1r="mat1row$x[$z]" 
				m2r="mat2row$z[$y]"
				#if [ ! -v "sum$x$y" ]
				#then
					#declare sum$x$y=0
				#fi
				#sum="sum$x$y"
				
				tmp1="$(( ${!m1r} * ${!m2r} ))"
				let sum+="$(( $tmp1 ))"
				
				if [[ "$DEBUG" ]]
				then
					printf "sum+%i=%i\t" "$tmp1" "$sum" >&2
				fi
			done
			#end of 3rd loop
		if [[ "$DEBUG" ]]
		then
			printf "Col=%s\n" "$sum" >&2 
		fi	

		if [[ ! "$DEBUG" ]]
		then
				if (( y == (m2cols - 1) ))
				then
					printf "%s" "$sum" 
				else
					printf "%s\t" "$sum" 
				fi
		fi
		done
		printf "\n" 
	done	
	_EXITCODE=0
	quit
}


#start by checking for proper command...
usage 
if [ "$SUBCMD" = "dims" ]
then
  #dims only takes one argument
  chk_arg_count "$2"
  if [[ "$?" -eq 0 ]]
  then
    chk_input "$INFILE"
    if [[ $_RET -eq 0 ]]
    then
      dims "$INFILE" 1
			quit
    fi
  fi
fi

if [ "$SUBCMD" = "transpose" ]
then
  #transpose only takes one argument
  chk_arg_count "$2"
  if [[ "$?" -eq 0 ]]
  then
    chk_input "$INFILE"
    if [[ $_RET -eq 0 ]]
    then
      transpose "$INFILE"
    fi
  fi
fi

if [ "$SUBCMD" = "mean" ]
then
  #mean takes one argument
  chk_arg_count "$2"
  if [[ "$?" -eq 0 ]]
  then
    chk_input "$INFILE"
    if [[ $_RET -eq 0 ]]
    then
      mean "$INFILE"
    fi
  fi
fi

if [ "$SUBCMD" = "add" ]
then
  #add takes two arguments
  chk_arg_count "$2" "$3"
  if [[ "$?" -eq 0 ]] 
  then
    chk_input "$2" "$3"
		if [[ "$?" -eq 0 ]] 
		then
			add "$2" "$3"
		fi
	fi
fi

if [ "$SUBCMD" = "multiply" ]
then
  #add takes two arguments
  chk_arg_count "$2" "$3"
  if [[ "$?" -eq 0 ]] 
  then
    chk_input "$2" "$3"
		if [[ $_RET -eq 0 ]]
		then
			multiply "$2" "$3"
		fi
	fi
fi

#cleanup files if any leftover
quit
